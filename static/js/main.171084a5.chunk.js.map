{"version":3,"sources":["Components/About.jsx","Components/Projects.jsx","Components/Home.jsx","Components/Games.jsx","Components/Contact.jsx","Components/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["About","Projects","Home","Games","Contact","Navbar","exact","to","className","activeClassName","App","location","useContext","__RouterContext","transitions","useTransition","pathname","from","opacity","transform","enter","leave","map","item","props","div","key","style","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sPAUeA,EARD,WACZ,OACE,iCACE,wDCKSC,EARE,WACf,OACE,iCACE,0DCKSC,EARF,WACX,OACE,iCACE,uDCKSC,EARD,WACZ,OACE,iCACE,wDCKSC,EARC,WACd,OACE,iCACE,0D,OCUSC,EAZA,WACb,OACE,6BACE,kBAAC,IAAD,CAASC,OAAK,EAACC,GAAG,YAAYC,UAAU,WAAWC,gBAAgB,6BAAnE,YACA,kBAAC,IAAD,CAASH,OAAK,EAACC,GAAG,SAASC,UAAU,WAAWC,gBAAgB,6BAAhE,SACA,kBAAC,IAAD,CAASH,OAAK,EAACC,GAAG,aAAaC,UAAU,WAAWC,gBAAgB,6BAApE,QACA,kBAAC,IAAD,CAASH,OAAK,EAACC,GAAG,WAAWC,UAAU,WAAWC,gBAAgB,6BAAlE,WACA,kBAAC,IAAD,CAASH,OAAK,EAACC,GAAG,SAASC,UAAU,WAAWC,gBAAgB,6BAAhE,W,QCiCSC,EA7BH,WAAO,IACTC,EAAaC,qBAAWC,KAAxBF,SAEFG,EAAcC,YAAcJ,GAAU,SAACA,GAAD,OAAcA,EAASK,WAAU,CAC3EC,KAAM,CAAEC,QAAS,EAAGC,UAAW,sBAC/BC,MAAO,CAAEF,QAAS,EAAGC,UAAW,oBAChCE,MAAO,CAAEH,QAAS,EAAGC,UAAW,yBAGlC,OACE,oCACE,kBAAC,EAAD,MACA,8BACGL,EAAYQ,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAT,OACf,kBAAC,IAASC,IAAV,CAAcC,IAAKH,EAAKG,IAAKC,MAAOH,GAClC,kBAAC,IAAD,CAAQb,SAAUY,GAChB,kBAAC,IAAD,CAAOjB,OAAK,EAACsB,KAAK,YAAYC,UAAW5B,IACzC,kBAAC,IAAD,CAAOK,OAAK,EAACsB,KAAK,SAASC,UAAW1B,IACtC,kBAAC,IAAD,CAAOG,OAAK,EAACsB,KAAK,aAAaC,UAAW3B,IAC1C,kBAAC,IAAD,CAAOI,OAAK,EAACsB,KAAK,WAAWC,UAAWzB,IACxC,kBAAC,IAAD,CAAOE,OAAK,EAACsB,KAAK,SAASC,UAAW7B,YCtBhC8B,QACW,cAA7BC,OAAOpB,SAASqB,UAEe,UAA7BD,OAAOpB,SAASqB,UAEhBD,OAAOpB,SAASqB,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.171084a5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst About = () => {\r\n  return (\r\n    <section>\r\n      <h1>This is the about page</h1>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React from 'react'\r\n\r\nconst Projects = () => {\r\n  return (\r\n    <section>\r\n      <h1>This is the project page</h1>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Projects;","import React from 'react'\r\n\r\nconst Home = () => {\r\n  return (\r\n    <section>\r\n      <h1>This is the home page</h1>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Home;","import React from 'react'\r\n\r\nconst Games = () => {\r\n  return (\r\n    <section>\r\n      <h1>This is the games page</h1>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Games;","import React from 'react'\r\n\r\nconst Contact = () => {\r\n  return (\r\n    <section>\r\n      <h1>This is the contact page</h1>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Contact;","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <nav>\r\n      <NavLink exact to=\"/projects\" className=\"nav-item\" activeClassName=\"nav-item nav-item--active\">Projects</NavLink>\r\n      <NavLink exact to=\"/games\" className=\"nav-item\" activeClassName=\"nav-item nav-item--active\">Games</NavLink>\r\n      <NavLink exact to=\"/twigstick\" className=\"nav-item\" activeClassName=\"nav-item nav-item--active\">Home</NavLink>\r\n      <NavLink exact to=\"/contact\" className=\"nav-item\" activeClassName=\"nav-item nav-item--active\">Contact</NavLink>\r\n      <NavLink exact to=\"/about\" className=\"nav-item\" activeClassName=\"nav-item nav-item--active\">About</NavLink>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Navbar;","import React, { useContext } from 'react';\r\nimport './App.css';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport { __RouterContext } from 'react-router';\r\n\r\nimport About from './Components/About';\r\nimport Projects from './Components/Projects';\r\nimport Home from './Components/Home';\r\nimport Games from './Components/Games';\r\nimport Contact from './Components/Contact';\r\nimport Navbar from './Components/Navbar';\r\n\r\nimport { useTransition, animated } from 'react-spring';\r\n\r\nconst App = () => {\r\n  const { location } = useContext(__RouterContext);\r\n\r\n  const transitions = useTransition(location, (location) => location.pathname, {\r\n    from: { opacity: 0, transform: 'translate(100%, 0)' },\r\n    enter: { opacity: 1, transform: 'translate(0%, 0)' },\r\n    leave: { opacity: 0, transform: 'translate(-100%, 0)' },\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <main>\r\n        {transitions.map(({ item, props }) => (\r\n          <animated.div key={item.key} style={props}>\r\n            <Switch location={item}>\r\n              <Route exact path='/projects' component={Projects} />\r\n              <Route exact path='/games' component={Games} />\r\n              <Route exact path='/twigstick' component={Home} />\r\n              <Route exact path='/contact' component={Contact} />\r\n              <Route exact path='/about' component={About} />\r\n            </Switch>\r\n          </animated.div>\r\n        ))}\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}